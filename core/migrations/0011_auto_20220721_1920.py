# Generated by Django 3.1.14 on 2022-07-21 19:20

from django.db import migrations, models
import django.db.models.deletion
import inheritable.models


class Migration(migrations.Migration):

    dependencies = [
        ('fdpuser', '0003_auto_20220721_1920'),
        ('supporting', '0003_auto_20220721_1920'),
        ('core', '0010_persontitle_grouping'),
    ]

    operations = [
        migrations.AlterField(
            model_name='grouping',
            name='address',
            field=models.CharField(blank=True, default='', help_text='Full address of group', max_length=254, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='cease_date',
            field=models.DateField(blank=True, help_text='Date grouping ceased to exist. If unknown leave blank and check "Is inactive"', null=True, verbose_name='cease date'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='counties',
            field=models.ManyToManyField(blank=True, db_table='fdp_grouping_county', help_text='All counties where the group operates, has jurisdiction in. If county not on list <a href="/admin/supporting/county/" target="_blank">manage options here</a>', related_name='groupings', related_query_name='grouping', to='supporting.County', verbose_name='counties'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='description',
            field=models.TextField(blank=True, help_text="Description of group and what it does. Appears on the group's profile page.", verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='email',
            field=models.EmailField(blank=True, default='', max_length=254, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='is_inactive',
            field=models.BooleanField(default=False, help_text="Select if the grouping is no longer active. Instead of deleting a group, mark it as inactive so that all the data relating to the group and the group history remains. This can also be used if you don't know the ceased date for a group but you know that they are no longer active.", verbose_name='Is inactive'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='name',
            field=models.CharField(blank=True, max_length=254, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='grouping',
            name='phone_number',
            field=models.CharField(blank=True, default='', max_length=256, verbose_name='phone number'),
        ),
        migrations.AlterField(
            model_name='groupingalias',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='groupingalias',
            name='name',
            field=models.CharField(help_text='Alternative name such as acronym, abbreviation, code, or nickname. Do not add variations in case or punctuation.', max_length=254, verbose_name='alias'),
        ),
        migrations.AlterField(
            model_name='groupingincident',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='groupingrelationship',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='description',
            field=models.TextField(blank=True, help_text='The main text that appears on officer profiles under known incidents', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='encounter_reason',
            field=models.ForeignKey(blank=True, help_text='If reason not on list <a href="/admin/supporting/encounterreason/" target="_blank">manage options here</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incidents', related_query_name='incident', to='supporting.encounterreason', verbose_name='encounter reason'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='for_admin_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users who are Administrators (both host and guest administrators). When combined with 'Host Only', then only host administrators can access this record.", verbose_name='admin only'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='for_host_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users belonging to the host organization (both host staff and host administrators). When combined with 'Admin Only', then only host administrators can access this record.", verbose_name='host only'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='location',
            field=models.ForeignKey(blank=True, help_text='Location of incident', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incidents', related_query_name='incident', to='supporting.location', verbose_name='location'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='location_type',
            field=models.ForeignKey(blank=True, help_text='If type not on list <a href="/admin/supporting/incidentlocationtype/" target="_blank">manage options here</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incidents', related_query_name='incident', to='supporting.incidentlocationtype', verbose_name='location type'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='tags',
            field=models.ManyToManyField(blank=True, db_table='fdp_incident_incident_tag', help_text='Add all tags that describe the incident. Add as many tags as are relevant. <a href="/admin/supporting/incidenttag/" target="_blank">manage options here</a>', related_name='incidents', related_query_name='incident', to='supporting.IncidentTag', verbose_name='tags'),
        ),
        migrations.AlterField(
            model_name='person',
            name='birth_date_range_end',
            field=models.DateField(blank=True, help_text='Example: If you know that a person is 28 years old on Jan 24 2021 enter the start range as January 25 1992 and end range January 24 1993. If known birth date is exact, set start and end ranges to the same date', null=True, verbose_name='Ending range for birth date'),
        ),
        migrations.AlterField(
            model_name='person',
            name='birth_date_range_start',
            field=models.DateField(blank=True, help_text='', null=True, verbose_name='Starting range for birth date'),
        ),
        migrations.AlterField(
            model_name='person',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='person',
            name='fdp_organizations',
            field=models.ManyToManyField(blank=True, db_table='fdp_person_fdp_organization', help_text='Restrict access to users from the specified non-host organization (both staff and administrators).', related_name='persons', related_query_name='person', to='fdpuser.FdpOrganization', verbose_name='organization access'),
        ),
        migrations.AlterField(
            model_name='person',
            name='for_admin_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users who are Administrators (both host and guest administrators). When combined with 'Host Only', then only host administrators can access this record.", verbose_name='admin only'),
        ),
        migrations.AlterField(
            model_name='person',
            name='for_host_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users belonging to the host organization (both host staff and host administrators). When combined with 'Admin Only', then only host administrators can access this record.", verbose_name='host only'),
        ),
        migrations.AlterField(
            model_name='personalias',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personalias',
            name='name',
            field=models.CharField(help_text='Alternative name, such as a nickname, or maiden name. Do not add variations in case or punctuation.', max_length=254, verbose_name='alias'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='address',
            field=models.CharField(blank=True, default='', help_text='Street address', max_length=254, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='city',
            field=models.CharField(blank=True, default='', help_text='City', max_length=254, verbose_name='city'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='email',
            field=models.EmailField(blank=True, help_text='Email address', max_length=254, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='is_current',
            field=models.BooleanField(default=False, help_text='Check if contact information is currently used by person', verbose_name='Is current'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='phone_number',
            field=models.CharField(blank=True, help_text='Phone number', max_length=256, verbose_name='phone number'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='state',
            field=models.ForeignKey(blank=True, help_text='State', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_contacts', related_query_name='person_contact', to='supporting.state', verbose_name='state'),
        ),
        migrations.AlterField(
            model_name='personcontact',
            name='zip_code',
            field=models.CharField(blank=True, default='', help_text='ZIP code', max_length=254, verbose_name='zip code'),
        ),
        migrations.AlterField(
            model_name='persongrouping',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='persongrouping',
            name='is_inactive',
            field=models.BooleanField(default=False, help_text='Select if the person is no longer associate with group but the end date is unknown', verbose_name='Is inactive'),
        ),
        migrations.AlterField(
            model_name='persongrouping',
            name='type',
            field=models.ForeignKey(blank=True, help_text='The type of relationships between the person and the group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_groupings', related_query_name='person_grouping', to='supporting.persongroupingtype', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='personidentifier',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personidentifier',
            name='identifier',
            field=models.CharField(help_text='Identifier value. Can be non-numeric.', max_length=254, verbose_name='identifier'),
        ),
        migrations.AlterField(
            model_name='personidentifier',
            name='person_identifier_type',
            field=models.ForeignKey(help_text="Type of identifier, such as shield number, driver's license, etc.", on_delete=django.db.models.deletion.CASCADE, related_name='person_identifiers', related_query_name='person_identifier', to='supporting.personidentifiertype', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='personincident',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personincident',
            name='is_guess',
            field=models.BooleanField(default=False, help_text='Check if there is uncertainty that the person being linked is the correct person involved', verbose_name='This is a guess'),
        ),
        migrations.AlterField(
            model_name='personincident',
            name='situation_role',
            field=models.ForeignKey(blank=True, help_text='Select the role the person had in this particular incident. If role not on list <a href="/admin/supporting/situationrole/" target="_blank">manage options here</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_incidents', related_query_name='person_incident', to='supporting.situationrole', verbose_name='situation role'),
        ),
        migrations.AlterField(
            model_name='personpayment',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personphoto',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='personphoto',
            name='photo',
            field=models.FileField(help_text='Photo representing person. Should be less than 2MB.<br>Allowed file formats: JPG image file .jpg, JPEG image file .jpeg, PNG image file .png, GIF image file .gif, BMP image file .bmp, TIFF image file .tiff, TIF image file .tif', unique=True, upload_to='person/photo/%Y/%m/%d/%H/%M/%S/', validators=[inheritable.models.AbstractFileValidator.validate_photo_file_size, inheritable.models.AbstractFileValidator.validate_photo_file_extension]),
        ),
        migrations.AlterField(
            model_name='personrelationship',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='persontitle',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='persontitle',
            name='title',
            field=models.ForeignKey(help_text='Title or rank', on_delete=django.db.models.deletion.CASCADE, related_name='person_titles', related_query_name='person_title', to='supporting.title', verbose_name='title'),
        ),
    ]

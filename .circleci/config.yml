# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  python: circleci/python@1.2
  browser-tools: circleci/browser-tools@1.4.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  run-tests: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/circle_test
          FDP_SECRET_KEY: opensesame
          FDP_QUERYSTRING_PASSWORD: ymllgljp//NRW9W7INVajTBS46oBpt0NLPfr7yQ6PEw=
          FDP_DATABASE_PASSWORD: opensesame
      - image: cimg/postgres:11.16
    resource_class: large
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client xvfb
      - run: |
          psql -d $TEST_DATABASE_URL < deploy/local/init_db.sql
          cp fdp/settings_example.py fdp/settings.py
      - python/install-packages:
          pkg-manager: pip
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/functional_tests/
      - run:
          name: Run tests
          command: ./run-all-tests.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: ~/project/functional_tests/screendumps
      - store_artifacts:
          path: ~/project/geckodriver.log

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  automated-tests: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - run-tests

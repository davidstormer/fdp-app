# Generated by Django 3.1.14 on 2022-07-21 19:20

from django.db import migrations, models
import django.db.models.deletion
import inheritable.models


class Migration(migrations.Migration):

    dependencies = [
        ('supporting', '0003_auto_20220721_1920'),
        ('sourcing', '0003_auto_20210825_1935'),
    ]

    operations = [
        migrations.AlterField(
            model_name='attachment',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='file',
            field=models.FileField(blank=True, help_text='If the attachment is a file, upload it here. Should be less than 100MB.<br>Allowed file formats: Adobe PDF .pdf, Microsoft Word 97-2003 .doc, Microsoft Word 2007+ .docx, Text file .txt, Rich-text format .rtf, JPG image file .jpg, JPEG image file .jpeg, PNG image file .png, GIF image file .gif, BMP image file .bmp, TIFF image file .tiff, TIF image file .tif, Microsoft Excel 97-2003 .xls, Microsoft Excel 2007+ .xlsx, Comma-separated value file .csv, text/tab-separated-values .tsv, Microsoft PowerPoint 97-2003 .ppt, Microsoft PowerPoint 2007+ .pptx, Apple Quicktime video file .mov, MPEG-4 video file .mp4, Open Web Media file .webm, video/x-msvideo .avi, application/x-dvi .dvi, video/quicktime .qt, audio/mpeg .mp2, audio/mpeg .mp3, audio/x-wav .wav, audio/x-aiff .aif, application/postscript .ps, application/postscript .ai, application/postscript .eps, application/x-pn-realaudio .ram, application/zip .zip, audio/basic .au, audio/basic .snd, audio/x-aiff .aifc, audio/x-aiff .aiff, audio/x-pn-realaudio .ra, image/ief .ief, image/svg+xml .svg, image/x-portable-anymap .pnm, image/x-portable-bitmap .pbm, image/x-portable-graymap .pgm, image/x-portable-pixmap .ppm, image/x-xbitmap .xbm, image/x-xpixmap .xpm, message/rfc822 .eml, message/rfc822 .mht, message/rfc822 .mhtml, message/rfc822 .nws, text/html .html, text/html .htm, text/richtext .rtx, text/x-vcard .vcf, text/xml .xml, video/mpeg .mpeg, video/mpeg .m1v, video/mpeg .mpa, video/mpeg .mpe, video/mpeg .mpg, video/x-sgi-movie .movie', max_length=254, upload_to='attm/%Y/%m/%d/%H/%M/%S/', validators=[inheritable.models.AbstractFileValidator.validate_attachment_file_size, inheritable.models.AbstractFileValidator.validate_attachment_file_extension]),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='for_admin_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users who are Administrators (both host and guest administrators). When combined with 'Host Only', then only host administrators can access this record.", verbose_name='admin only'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='for_host_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users belonging to the host organization (both host staff and host administrators). When combined with 'Admin Only', then only host administrators can access this record.", verbose_name='host only'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='link',
            field=models.URLField(blank=True, help_text='If the attachment is located on the web, add the web address.', verbose_name='Web address'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='name',
            field=models.CharField(help_text='The name of the attachment as shown to users.', max_length=254, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='type',
            field=models.ForeignKey(blank=True, help_text='<a href="/admin/supporting/attachmenttype/" target="_blank">Manage options here</a>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachments', related_query_name='attachment', to='supporting.attachmenttype', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='content',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='content',
            name='for_admin_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users who are Administrators (both host and guest administrators). When combined with 'Host Only', then only host administrators can access this record.", verbose_name='admin only'),
        ),
        migrations.AlterField(
            model_name='content',
            name='for_host_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users belonging to the host organization (both host staff and host administrators). When combined with 'Admin Only', then only host administrators can access this record.", verbose_name='host only'),
        ),
        migrations.AlterField(
            model_name='content',
            name='link',
            field=models.URLField(blank=True, default='', help_text='URL from which content was retrieved. If applicable.', max_length=500, verbose_name='web link'),
        ),
        migrations.AlterField(
            model_name='content',
            name='name',
            field=models.CharField(blank=True, default='', help_text='Name of content such as article headline, or case header, if applicable. E.g. "People v. John Doe"', max_length=254, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='content',
            name='publication_date',
            field=models.DateField(blank=True, help_text='Date content was published. If applicable.', null=True, verbose_name='publication date'),
        ),
        migrations.AlterField(
            model_name='content',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Type of content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contents', related_query_name='content', to='supporting.contenttype', verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='contentcase',
            name='court',
            field=models.ForeignKey(blank=True, help_text='Court or administration in which case was pursued', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_cases', related_query_name='content_case', to='supporting.court', verbose_name='court'),
        ),
        migrations.AlterField(
            model_name='contentcase',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='contentcase',
            name='outcome',
            field=models.ForeignKey(blank=True, help_text='Outcome of case, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_cases', related_query_name='content_case', to='supporting.contentcaseoutcome', verbose_name='case disposition'),
        ),
        migrations.AlterField(
            model_name='contentcase',
            name='settlement_amount',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='If case was resolved with a settlement, the amount of that settlement.', max_digits=12, null=True, verbose_name='settlement amount'),
        ),
        migrations.AlterField(
            model_name='contentidentifier',
            name='content_identifier_type',
            field=models.ForeignKey(help_text='Type of content identifier, such as case number', on_delete=django.db.models.deletion.CASCADE, related_name='content_identifiers', related_query_name='content_identifier', to='supporting.contentidentifiertype', verbose_name='content identifier type'),
        ),
        migrations.AlterField(
            model_name='contentidentifier',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='contentidentifier',
            name='for_admin_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users who are Administrators (both host and guest administrators). When combined with 'Host Only', then only host administrators can access this record.", verbose_name='admin only'),
        ),
        migrations.AlterField(
            model_name='contentidentifier',
            name='for_host_only',
            field=models.BooleanField(default=False, help_text="Restrict access to this record to users belonging to the host organization (both host staff and host administrators). When combined with 'Admin Only', then only host administrators can access this record.", verbose_name='host only'),
        ),
        migrations.AlterField(
            model_name='contentidentifier',
            name='identifier',
            field=models.CharField(help_text='Identifier number value, such as the lawsuit number, IAB case number, or similar. Can be non-numeric.', max_length=254, verbose_name='identifier'),
        ),
        migrations.AlterField(
            model_name='contentperson',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='contentperson',
            name='is_guess',
            field=models.BooleanField(default=False, help_text='Check if there is uncertainty that the person being linked is the correct person involved', verbose_name='This is a guess'),
        ),
        migrations.AlterField(
            model_name='contentperson',
            name='situation_role',
            field=models.ForeignKey(blank=True, help_text='The role the person had in relation to this piece of content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_persons', related_query_name='content_person', to='supporting.situationrole', verbose_name='situation role'),
        ),
        migrations.AlterField(
            model_name='contentpersonallegation',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='contentpersonpenalty',
            name='description',
            field=models.TextField(blank=True, help_text='', verbose_name='Description'),
        ),
    ]
